generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(uuid())
  userName       String         @unique
  email          String         @unique
  password       String
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")
  schedule       Schedule[]
  questions      Question[] // Questions posted by the user
  savedQuestions Question[]     @relation("UserSavedQuestions") // Questions saved by the user
  answers        Answer[] // Answers given by the user
  questionLikes  QuestionLike[] // Questions liked by the user
  notifications  Notification[]
  isVerified     Boolean        @default(false)
  verificationToken String?
  requestedMocks  MockInterviewRequest[] @relation("Requester")
  receivedMocks   MockInterviewRequest[] @relation("Recipient")
    followedThreads ThreadFollower[]

  @@map("user")
}

/// Represents a scheduled interview.
model Schedule {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  interviewType String
  peerType      String
  practiceLevel String
  date          DateTime
  time          DateTime
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@map("schedule")
}

/// Represents a question posted by a user.
model Question {
  id        String   @id @default(uuid())
  title     String
  content   String
  userId    String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])

  savedByUsers User[]         @relation("UserSavedQuestions") 
  tags         QuestionTag[] 
  answers      Answer[] 
  likes        QuestionLike[]

  @@map("question")
}


model Tag {
  id        String        @id @default(uuid())
  name      String        @unique
  questions QuestionTag[]

  @@map("tag")
}


model QuestionTag {
  questionId String
  tagId      String
  question   Question @relation(fields: [questionId], references: [id])
  tag        Tag      @relation(fields: [tagId], references: [id])

  @@id([questionId, tagId])
  @@map("question_tag")
}


model Answer {
  id         String   @id @default(uuid())
  content    String
  userId     String
  questionId String
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  user       User     @relation(fields: [userId], references: [id])
  question   Question @relation(fields: [questionId], references: [id])

  @@map("answer")
}


model QuestionLike {
  userId     String
  questionId String
  createdAt  DateTime @default(now()) @map("created_at")
  user       User     @relation(fields: [userId], references: [id])
  question   Question @relation(fields: [questionId], references: [id])

  @@id([userId, questionId])
  @@map("question_like")
}


model Notification {
  id          Int      @id @default(autoincrement())
  message     String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  interviewId String?
  interview   Interview? @relation(fields: [interviewId], references: [id])
   link      String

  
}


model Interview {
  id            String   @id @default(uuid())
  userEmail     String
  interviewDate DateTime
  candidateEmail String
  createdAt     DateTime @default(now())
  notifications Notification[] // Added opposite relation field
  confirmed  Boolean  @default(false)
}

model MockInterviewRequest {
  id          String   @id @default(uuid())
  requesterId String
  recipientId String
  status      String   @default("pending")
  createdAt   DateTime @default(now())

  requester   User     @relation("Requester", fields: [requesterId], references: [id])
  recipient   User     @relation("Recipient", fields: [recipientId], references: [id])
}
model EmailLog {
  id          String   @id @default(uuid())
  recipient   String
  subject     String
  content     String
  sentAt      DateTime @default(now())
}
model Thread {
  id          String   @id @default(uuid())
  title       String
  content     String
  createdAt   DateTime @default(now())
  replies     Reply[]
  followers   ThreadFollower[]
}
model Reply {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  thread    Thread   @relation(fields: [threadId], references: [id])
  threadId  String
}
model ThreadFollower {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  thread    Thread   @relation(fields: [threadId], references: [id])
  threadId  String
}
