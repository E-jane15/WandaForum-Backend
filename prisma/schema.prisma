generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(uuid())
  userName       String         @unique @map("user_name")
  email          String         @unique
  password       String
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")
  schedule       Schedule[]
  questions      Question[] // Questions posted by the user
  savedQuestions Question[]     @relation("UserSavedQuestions") // Questions saved by the user
  answers        Answer[] // Answers given by the user
  questionLikes  QuestionLike[] // Questions liked by the user
  
  
  @@map("user")
}

model Schedule {
  id            String   @id @default(uuid())
  userId        String   @map("user_id")
  user          User     @relation(fields: [userId], references: [id])
  interviewType String   @map("interview_type")
  peerType      String   @map("peer_type")
  practiceLevel String   @map("practice_level")
  date          DateTime
  time          DateTime
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@map("schedule")
}

model Question {
  id        String   @id @default(uuid())
  title     String
  content   String
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])

  savedByUsers User[]         @relation("UserSavedQuestions") // Users who saved this question
  tags         QuestionTag[] // Tags associated with the question
  answers      Answer[] // Answers to this question
  likes        QuestionLike[]

  @@map("question")
}

model Tag {
  id        String        @id @default(uuid())
  name      String        @unique
  questions QuestionTag[]

  @@map("tag")
}

model QuestionTag {
  questionId String   @map("question_id")
  tagId      String   @map("tag_id")
  question   Question @relation(fields: [questionId], references: [id])
  tag        Tag      @relation(fields: [tagId], references: [id])

  @@id([questionId, tagId])
  @@map("question_tag")
}

model Answer {
  id         String   @id @default(uuid())
  content    String
  userId     String   @map("user_id")
  questionId String   @map("question_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  user       User     @relation(fields: [userId], references: [id])
  question   Question @relation(fields: [questionId], references: [id])

  @@map("answer")
}

model QuestionLike {
  userId     String   @map("user_id")
  questionId String   @map("question_id")
  createdAt  DateTime @default(now()) @map("created_at")
  user       User     @relation(fields: [userId], references: [id])
  question   Question @relation(fields: [questionId], references: [id])

  @@id([userId, questionId])
  @@map("question_like")
}

// model Notification {
//   id          Int      @id @default(autoincrement())
//   message     String
//   isRead      Boolean  @default(false)
//   createdAt   DateTime @default(now())
//   userId      String
//   user        User     @relation(fields: [userId], references: [id])
//   interviewId Int?
//   interview   Interview? @relation(fields: [interviewId], references: [id])
// }

model Interview {
  id            Int            @id @default(autoincrement())
  title         String
  date          DateTime
  notifications Notification[]
}




